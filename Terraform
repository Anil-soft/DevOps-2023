 /*  TERRAFORM */

 - Infrastructure as code (IaC) tools allow you to manage infrastructure with configuration files rather than through a graphical user interface. 
 - IaC allows you to build, change, and manage your infrastructure in a safe, consistent, and repeatable way by defining resource configurations 
   that you can version, reuse, and share.
 - declarative configuration files, and manages your infrastructure's lifecycle. 
 - Terraform's state allows you to track resource changes throughout your deployments.
 
   Initialize - Install the plugins Terraform needs to manage the infrastructure.
   Plan - Preview the changes Terraform will make to match your configuration.
   Apply - Make the planned changes.
   
 - terraform & ansible are client only architecture model which means no need to have master server.
 - chef, puppet are client server model which means master should be there
 
 * terraform.tfstate
    - The state is the data that Terraform has recorded about a workspace at a particular point in its lifecycle, usually after an apply. 
    
 * terraform.tfstate.backup
    - it will store the backup of the previous version of the execution, if screw the infrastructure we can backup from this file.
    
 * terraform show -> it shows the general information of the previous version of the data
 
 - export AWS_ACCESS_KEY_ID= "access key"
 - export AWS_SECRET_ACCESS_KEY= "secret key"
 
 - AWS CLI has to be configured to tarraform to be able to communicate with AWS
 
 - terraform workspace list => to list out the terrafom workspaces
 - terrraform workspace new dev => to create the new workspace
 - terraform workspace select prod => to switch the workspace
 
 resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = var.image_id
}
 
 * provider 
 
    provider "aws" {
       region = "us-east-1"
       access_key = "my-access-key"
       secret_key = "my-secret-key"
    }
  
  
  * instance creation
  
  resource "aws_instance" "web" {
  ami           = data.aws_ami.ubuntu.id  
  instance_type = "t3.micro"

  tags = {
    Name = "HelloWorld"
  }
}

* vpc creation 

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
  
  tags = {
    Name = "Main"
  }
}

* subnet creation

resource "aws_subnet" "main" {
  vpc_id = aws_vpc.main.id
  cidr_block = "10.0.1.0/24"
  
  tags = {
    Name = "Main"
  }
}

* internet gateway creation

  resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main"
  }
}

* security group

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.main.id

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_tls"
  }
}

* key pair creation

resource "aws_key_pair" "deployer" {
  key_name   = "deployer-key"
  public_key = "<pub-key>"
  }
  
* s3 bucket creation 

  resource "aws_s3_bucket" "b" {
  bucket = "my-tf-test-bucket"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}

resource "aws_s3_bucket_acl" "example" {
  bucket = aws_s3_bucket.b.id
  acl    = "private"
}

resouces "random_id" "myrandom_id"{
        byte_length = 2
     }
  resource "aws_s3_bucket" "mys3_bucket" {
  bucket = "anils3bucket-${random_id.myrandom_id.hex}"

  tags = {
    Name        = "anils3bucket-${random_id.myrandom_id.hex}"
  }
}

* route table
  resource "aws_route_table" "example" {
  vpc_id = aws_vpc.example.id

  route {
    cidr_block = "10.0.1.0/24"
    gateway_id = aws_internet_gateway.example.id
  }

  tags = {
    Name = "example"
  }
}

* route table subnet association
  
  resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet1.id
  route_table_id = aws_route_table.my_routetable.id
}

* store state file in S3 bucket

terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "myapp/dev/terraform.tfstate"
    region = "us-east-1"
  }
}

* lock the terraform state file
 
  terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "myapp/dev/terraform.tfstate"
    region = "us-east-1"
    dynamodb_table = "terraformstate"
  }
}

* what is terraform data source ?
  - we can get back the information from cloud resources like image id's, ip addresses, instance name.
  
  provider "aws" {
   region     = "eu-central-1"
   access_key = "AKIATQ37NXB2JMXVGYPG"
   secret_key = "ockvEN1DzYynDuKIh56BVQv/tMqmzvKnYB8FttSp"
}

resource "aws_instance" "ec2_example" {

   ami           = "ami-0767046d1677be5a0"
   instance_type =  "t2.micro"

   tags = {
           Name = "Terraform EC2"
   }
}

data "aws_instance" "myawsinstance" {
    filter {
      name = "tag:Name"
      values = ["Terraform EC2"]
    }

    depends_on = [
      "aws_instance.ec2_example"
    ]
} 
 
 * variables 
 
 provider "aws" {
   region     = "eu-central-1"
   access_key = "<INSERT_YOUR_ACCESS_KEY>"
   secret_key = "<INSERT_YOUR_SECRET_KEY>"
}

resource "aws_instance" "ec2_example" {

   ami           = "ami-0767046d1677be5a0"
   instance_type =  "t2.micro"
   count = var.instance_count

   tags = {
           Name = "Terraform EC2"
   }
}

variable.tf 

variable "instance_count" {
  description = "EC2 instance count"
  type        = number
  default     = 2
}
 
dev.tfvars

instance_name="dev_instance"
environment_name="dev"

- terraform plan -var-file="dev.tfvars" ==> when we define variables for different environments
- terraform plan -var mykey_name = "anil_key" -> to pass the var from command line

what is terraform data source ?
- Data sources provide dynamic information about entities that are not managed by the current Terraform and configuration.
  provider "aws" {
   region     = "eu-central-1"
   access_key = "AKIATQ37NXB2JMXVGYPG"
   secret_key = "ockvEN1DzYynDuKIh56BVQv/tMqmzvKnYB8FttSp"
}

resource "aws_instance" "ec2_example" {

   ami           = "ami-0767046d1677be5a0"
   instance_type =  "t2.micro"

   tags = {
           Name = "Terraform EC2"
   }
}

data "aws_instance" "myawsinstance" {
    filter {
      name = "tag:Name"
      values = ["Terraform EC2"]
    }

    depends_on = [
      "aws_instance.ec2_example"
    ]
} 

output "fetched_info_from_aws" {
  value = data.aws_instance.myawsinstance
}


<< Terraform interview questions >>
 
How to check the resources that have been created through terraform ?
$ terraform state list

we have existing terraform infrastructure created in AWS now one particular resource needs to be re-created, whenever we do the next apply?
 terraform taint aws_instance.my_vm_1
 The terraform taint command informs Terraform that a particular object has become degraded or damaged. 
 Terraform will propose to replace it in the next plan you create.
 Terraform taint command is deprecated use the -replace
 $ terraform apply -replace="aws_instance.my_vm_2"
 
Explain or walk through step by step process to secure .tfstate file and by making it readily available for other developers within the team?
A backend defines where Terraform stores its state data files.
 terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "myapp/dev/terraform.tfstate"
    region = "us-east-1"
  }
}

Explain various type of META-Arguments in terraform and their benefits?
 - meta arguments changes the default behaviours of terraform configuration
 depends_on, count, for_each, provider, lifecycle.
 
who creates the "terraform.tfstate.backup" file and under which scenario it is created ?
 - backup state file created automatically created when trraform destroy command is executed.
 
How do you handle secrets in terraform ?
 - store the state file in remote backend s3 bucket and enforce the IAM permissions to access that bucket
 
What is terraform state rollback?
 - 
 
How to import existing infrastructure under terraform control
 - use the terraform import concept, i will take the existing infrastructure into terraform control.
 - first we need to create the config file with the values of existing infra
 $ terraform import aws_instance.myvm <Instance ID>
    
    terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.0"
    }
  }
}

resource "aws_instance" "myvm" {
 ami           = "ami-00f22f6155d6d92c5"
 instance_type = "t2.micro"
 
 tags = {
     "Name": "MyVM"
 }
}

How to print terraform output values
 $ terraform output
output "instance_ip_addr" {
  value       = aws_instance.server.private_ip
  description = "The private IP address of the main server instance."
}

output "lb_address" {
  value = aws_alb.web.public_dns
}

terraform variables 

variable.tf
variable "access_key" {}
variable "secret_key" {}
variable "region" {
 default="us-east-1"
  }
  
terraform.tfvars
access_key=""
secret_key=""
region="us-east-1"
