<== Ansible installation ==>
  - sudo amazon-linux-extras install ansible2
  - add the private key (vi ec2-key.pem) assign chmod 400 ec2-key.pem permission
  - ssh-agent bash
  - cp ec2-key.pem ~/.ssh/
    - ssh-add ~/.ssh/ec2-key.pem 
  - create the inventory file and add the private ips
  - default location /etc/ansible/hosts
  
 :- Ansible works on client only model which means no need to have master server
 
 :- if we want define variables for the particulary server we have create the dir called hosts_vars and variable file should be same as server name
 
 :- to define variables for the set of group of servers have to create the dir called group_Vars
 
 :- ansible -m setup -a "filter=ansible_distribution" server1 => to print the server information
 
 :- ansible-playbook dev.yaml -e my_name=anil => to pass the variable from command line
 
 Note:- ansible.cfg file the important file in ansible which is having all the information like inventory, interpreter, private key file, privilege escalation

inventory = /path/to/your/inventory
remote_user = your_remote_user
private_key_file = /path/to/your/private_key
forks = 5
gather_facts = True

 Idempotency:- if the configuration is already existed then it will skip or else it will execute the configation
 Idempotency means that if you run an Ansible playbook multiple times, it won't make unnecessary changes to your system. 
 If the system is already in the desired state, running the playbook again won't alter anything.

  ---
- hosts: webservers
  become: True
  tasks:
    - name: install packages
      yum:
        name: httpd
        state: present
    - name: start apache server
      service:
         name: httpd
         state: started
         enable: True
    - name: deploy static website
      copy:
        src: index.html
        dest: /var/www/html/
     notify:
     - restart httpd
    handlers:
    - name: restart httpd
      service:
        name: httpd
        state: restarted
  
  * Ansible Roles
  
  - defaults :- default variables for the role
  - Files:- Contains files to copy to destination
  - Handlers:- Based on notify do something specified
  - Meta:- meta data about current role ( like what is the ansible version, who is the author )
  - Tasks:- List of task that to be executed
  - Templates:- Template files to deploy
  - test:- if you want additional verification of your build
  - vars:- other variables for the role
  
   - ansible-galaxy init webserver --offline  => to create the roles called webserver through ansible-galaxy
 
 * File Module
    
- name: create a file
  file:
    path: /etc/file1.txt
    state: touch
    owner: ec2-user
    group: ec2-user
    mode: '0644'
    
- name: creating multiple files
  file:
    path: "{{ item }}"
    state: touch
  with_items:
  - file1.txt
  - file2.txt
  
- name: Change file ownership, group and permissions
  file:
    path: /etc/file1.txt
    owner: ec2-user
    group: ec2-user
    mode: '0644'
    
- name: create a dir
  file:
  path: /etc/anil_dir
  state: directory
  mode: '0755
  
* copy module
  
- copy:
    src: /etc/myfiles/file1.txt
    dest: /etc/file1.txt
    owner: root
    group: root
    mode: 0644
    
* Script module
  
- name: working with ansible
  hosts: server1
  tasks:
    - name: executing script
      script: ./script.sh
      register: myoutput
      
    - debug: msg="{{myoutput}}"
    
 * vars 
    
- name: working with ansible
  hosts: server1
  vars:
    myvar: 100
  tasks:
    - name: printing the varaible value
      command: echo "my varaible value is {{myvar}}"

- name: print greeting
  hosts: "*"
  tasks:
    - include_vars: name_vars.yml

    - debug: msg="Hello, {{ name }}!"

Note:- my variables you set with set_fact will not be overwritten with include_vars

- name: print greeting
  hosts: server1
  tasks:
    - set_fact: name=anwi
    - include_vars: name_vars.yml
    - debug: msg="hello, {{name}}"
      
- name: working with ansible
  hosts: server1
  vars_files:
    - myvarfile.yaml
  tasks:
    - name: printing the varaible value
      command: echo "my current batch name is {{ batchname }}"

* with_items

- name: printing the data
  command: echo "hi i am {{item}}"
  with_items: [10,20,30,40]
  
- name: printing the file
  command: echo "{{item}}"
  with_fileglob:
    - "/tmp/*"
    
- name: printing the file content
  command: echo "{{item}}"
  with_lines:
    - "cat /etc/hosts"
    
- name: printing the sequence
  command: echo "{{item}}"
  with_sequence: start=1 end=5
    
- name: printing the dictionary values
  command: echo "{{item.key}} ==> {{item.value}}"
  with_dict:
    "{{ansible_default_ipv4}}"
  
 * user creation
    
- name: Add the user 'anil' with a specific uid and a primary group of 'admin'
  user:
    name: anil
    shell: /bin/bash
    comment: John Doe
    uid: 1040
    group: admin
    
 * ignore errors
 
- name: working with special cases
  hosts: server1
  tasks:
    - name: executing script
      script: ./script.py
      ignore_errors: true
      
    - name: running the command
      command: echo "Hi, this is task two"
      
  * delegate to
     
     - name: printing hostname
       command: hostname
       delegate_to: server2
       
  * serial module
  
    - name: working with serial module
      hosts: all
      serial: 1
      tasks:
        - name: printing the hostname
          command: hostname
          
  * Ansible vault
  
  - ansible-vault create mydbpass.yaml  => to create the new file with ansible vault
  - ansible-vault encrypt mydbpass.yaml  => to encrypt the existing file
  - ansible-vault edit mydbpass.yaml  => to edit the information
  - ansible-vault rekey mydbpass.yaml  => to change ansible-vault password
  - ansible-vault view mydbpass.yaml 
  - ansible-playbook --ask-vault-pass myvault.yaml  => it asks us to give the password to decrypt the secret
  - ansible-playbook --vault-password-file=mypassword myvault.yaml
  - --syntax-check (to check the syntax)
  - --list-tasks (to list out the tasks)
  - ansible-playbook -t "t1,t3" main.yaml  => to execute only t1,t3 tasks
  
  * import playbook
    - import_playbook: conditions.yaml  (you can import one playbook in another playbook and run both playbooks at a time)
    
 Note:- curl http://<ip-addr>/latest/meta-data/public-ipv4 (we can get the server information)
 
 * install mysql
 
 ---
- name: installing mysql and dependencies 
  package:
    name: "{{item}}"
    state: present
  with_items:
    - mysql-server
    - mysql-client
    - python3-mysqldb
    - ibmysqlclient-dev
    
- name: start and enable mysql service
  systemd:
    name: mysql
    enabled: yes
    
- name: creating the user admin
  mysql_user:
    name: "admin"
    password: "admin123"
    priv: '*.*:ALL'
    host: '%'
    state: present
    
- name: creating database
  mysql_db:
    name: "mydatabase"
    state: "present"
  
do you think ansible is better than other configuration management tool ? if yes, why?
 - Ansible is agent less, if we configure hundreds of virtual machines, to configure all of the these servers no need to install
   any agent on the servers. you can make communication between the servers through SSH.
 - Ansible uses yaml scripting which very easy to use.

What is dyamic inventory?
 - Ansible keeps looking at AWS account for newly added VMs ansible would auto configure those virtual machines using dynamic inventory.
 
what is ansible galaxy and how to use it?
 - ansible galaxy is used to create the roles 
  $ ansible-galaxy install namespace.role_name
  
what are handlers in ansible and  why are they used ?
 - Sometimes you want a task to run only when a change is made on a machine.
 -  For example, you may want to restart a service if a task updates the configuration of that service, but not if the configuration is unchanged. 
 -  Ansible uses handlers to address this use case. Handlers are tasks that only run when notified.
Example:- 
 - name: Write the apache config file
      ansible.builtin.template:
        src: /srv/httpd.j2
        dest: /etc/httpd.conf
      notify:
      - Restart apache
handlers:
    - name: Restart apache
      ansible.builtin.service:
        name: httpd
        state: restarted
        
How to executes ansible tasks in paralell ?
  - 
  
Explain about ansible tags ?
 - If you have a large playbook, it becomes useful to be able to run only a specific part of it rather than running everything in the playbook. 
 
- hosts: webservers
  become: True
  tasks:
    - name: install packages
      yum:
        name: httpd
        state: present
      tags:
        - install
    - name: start apache server
      service:
         name: httpd
         state: started
         enable: True
      tags:
        - start
    - name: deploy static website
      copy:
        src: index.html
        dest: /var/www/html/
      tags:
        - deploy
        
    ansible-playbook apache.yaml --tags=install,start
    ansible-playbook apache.yaml --skip-tags=install
     
Interview questions and answers?
1. what is configuration management?
   configuration management is nothing but managing servers like installation of packages, upgrades on softwares,

2. what is ansible tower?
   ansible tower is like enterprise level, it provides some graphical user interface and extends the ansible capabilities.

3. can you explain me structure of ansible playbook using roles?

  - defaults :- default variables for the role
  - Files:- Contains files to copy to destination
  - Handlers:- Based on notify do something specified
  - Meta:- meta data about current role ( like what is the ansible version, who is the author )
  - Tasks:- List of task that to be executed
  - Templates:- Template files to deploy
  - test:- if you want additional verification of your build
  - vars:- other variables for the role

  - name: example ansible playbook for roles
    hosts: all
    become: yes
    roles:
      - custom-role
- import_tasks: packages.yml  { to import the tasks into main.yml }

4. does ansible support parallel execution of tasks ?


5. can you place the ansible vars precedence ?
   extra vars we define in the command line (-e "user=my_user"), set_facts, include vars, task vars, role vars, group vars.

6.what do you think ansible can improve ?
  ansible can not provide verbosity in the task basis, so it can improve in that aspect.

7. what are facts in ansible ?
   facts are nothing but they have the details about hosts or VMs which we have mentioned in the inventory
   it can be installed operating system, IP address, OS family.

Explain scenario when to use either ansible playbooks or AD HOC commands?
  playbooks:
    Playbooks are reusable. If you find yourself repeating tasks across different scenarios, playbooks allow you 
    to encapsulate and reuse configurations, making your infrastructure code more modular and maintainable.
    Playbooks can utilize roles, which are a way of organizing tasks, handlers, and variables into reusable structures. 
    Playbooks use a declarative syntax, allowing you to express the desired state of your system. This makes it easier to understand 

  AD HOC:
    Use ad hoc commands for one-time commands or simple tasks that don't require a full playbook. 
    $ ansible web_servers -i inventory.ini -m apt -a "name=nginx state=present"
    Ad hoc commands are useful for running quick checks, gathering information, or troubleshooting issues on remote systems.
    $ ansible all -i inventory.ini -m shell -a "free -m"

 what are the various ways to verify playbooks, prior to execution?
   --syntax-check check the syntax
   --check  how the execution will happen show the preview
  
 How to continue ansible playbook tasks even if some of the task fails?
   ignore_errors keyword to continue despite the failure.

explain ways to run the same ansible playbooks on distinctive nodes with different ports and usernames.
  Define the nodes in a static inventory file (inventory.ini) and use group variables to set the connection parameters.
  [web_servers]
node1 ansible_host=example1.com ansible_port=22 ansible_user=user1
node2 ansible_host=example2.com ansible_port=2222 ansible_user=user2

$ ansible-playbook -i example.com, -e "ansible_port=2222 ansible_user=user2" your_playbook.yml

Explain the importance of ansible roles and create a role to install the "apache" webserver on target hosts?
  Ansible roles are a way to organize and structure your Ansible code in a modular and reusable manner. 
  Roles provide a mechanism for breaking down complex playbooks into smaller

Example:
# install_apache/defaults/main.yml
apache_package: apache2

# install_apache/tasks/main.yml
---
- name: Install Apache
  package:
    name: "{{ apache_package }}"
    state: present

- name: Start Apache service
  service:
    name: "{{ apache_package }}"
    state: started
    enabled: yes
# install_apache_playbook.yml
---
- name: Install Apache on Web Servers
  hosts: web_servers
  become: true

  roles:
    - install_apache


How do we trigger the "webserver" service restart task, whenever there is a configuration change in the "webserver" or else skip the 
restart task?
 you can use the notify and handlers mechanism in Ansible. Handlers are tasks that only run when notified, and they are typically used 
 for actions like service restarts


  # install_apache/tasks/main.yml
---
- name: Install Apache
  package:
    name: "{{ apache_package }}"
    state: present
  notify: Restart Apache

- name: Start Apache service
  service:
    name: "{{ apache_package }}"
    state: started
    enabled: yes

handlers:
  - name: Restart Apache
    service:
      name: "{{ apache_package }}"
      state: restarted

What is jinja template and how to use that?
  a Jinja2 template is a text file that contains placeholders or variables 
  that can be replaced with actual values when processed by a template engine. 

# This is a Jinja2 template for a configuration file

[Server]
hostname = {{ server_hostname }}
port = {{ server_port }}

[Database]
name = {{ db_name }}
user = {{ db_user }}
password = {{ db_password }}


# This is a YAML file containing variables for the template

server_hostname: example-server
server_port: 8080

db_name: my_database
db_user: db_user
db_password: secret_password


---
- name: Generate Configuration File
  hosts: localhost
  gather_facts: false
  become: false

  tasks:
    - name: Load Variables
      include_vars:
        file: vars.yml

    - name: Generate Configuration File
      template:
        src: template.conf.j2
        dest: /etc/my_app/config.conf

































  
    
    
    
    
    
    
    
    
    
    
    
    
    
